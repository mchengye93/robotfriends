{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","robot","id","alt","name","email","CardList","robots","map","SearchBox","type","placeholder","onChange","handleSearch","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","searchField","bind","fetch","then","response","json","users","e","console","log","target","value","filteredRobots","filter","toLowerCase","includes","toLocaleLowerCase","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NAgBeA,EAbF,SAACC,GAEV,OAEI,yBAAKC,UAAW,uCACZ,yBAAKC,IAAG,+BAA2BF,EAAMG,MAAMC,GAAvC,iBAA0DC,IAAI,WACtE,6BACI,4BAAKL,EAAMG,MAAMG,MACjB,2BAAIN,EAAMG,MAAMI,UCGjBC,EAXE,SAACR,GACV,OACK,6BAEOA,EAAMS,OAAOC,KAAI,SAACP,GACd,OAAO,kBAAC,EAAD,CAAMA,MAAOA,SCD7BQ,EALG,SAACX,GACf,OACI,2BAAOY,KAAK,OAAOC,YAAY,gBAAgBC,SAAUd,EAAMe,gBCOxDC,EATA,SAAChB,GACZ,OACI,yBAAKiB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UAChEpB,EAAMqB,WCgBHC,E,YAlBX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KACDuB,MAAQ,CACTC,UAAS,GAHE,E,+EAOAC,EAAOC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAK3B,MAAMqB,a,GAhBEQ,IAAMC,WC4DnBC,E,YAvDX,aAAe,IAAD,8BACV,+CACKR,MAAQ,CACTd,OAAO,GACPuB,YAAY,IAGhB,EAAKjB,aAAe,EAAKA,aAAakB,KAAlB,gBAPV,E,iFASO,IAAD,OAChBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACnB,OAAO6B,S,mCAG5BC,GACTC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBhB,KAAKC,SAAS,CACVI,YAAaO,EAAEG,OAAOC,U,+BAKpB,IAAD,EACsBhB,KAAKJ,MAA3Bd,EADA,EACAA,OAAOuB,EADP,EACOA,YAERY,EAAiBnC,EAAOoC,QAAO,SAAC1C,GAChC,OAAOA,EAAMG,KAAKwC,cAAcC,SAASf,EAAYgB,wBAGzD,OAAIvC,EAAOwC,OASH,yBAAKhD,UAAU,UACf,2CACA,kBAAC,EAAD,CAAWc,aAAeY,KAAKZ,eAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUN,OAASmC,OAZ3B,yBAAK3C,UAAU,UACf,2CACA,+C,GAnCE4B,IAAMC,W,MCMJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.b86b6b06.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = (props) => {\n    \n    return (\n        \n        <div className =\"bg-light-green dib br3 pa3 ma2 grow\">\n            <img src ={`https://robohash.org/${props.robot.id}?size=200x200`} alt='robots'/>\n            <div>\n                <h2>{props.robot.name}</h2>\n                <p>{props.robot.email}</p>\n            </div>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n        return (\n             <div>   \n                    {\n                    props.robots.map((robot) => {\n                        return <Card robot={robot} />\n                    })\n                    }\n                </div>\n            )  \n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n    return (\n        <input type=\"text\" placeholder=\"search robots\" onChange={props.handleSearch}/>\n    )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return  (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'600px'}}>\n           {props.children} \n        </div>\n      \n    );\n    \n}\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError:false\n        }\n    }\n\n    componentDidCatch( error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooopps. That is no good</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;","import React from 'react';\nimport {robots} from '../robots';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots:[],\n            searchField:''\n\n        }\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots:users}));\n\n    }\n    handleSearch(e) {\n        console.log(e.target.value);\n        this.setState({\n            searchField: e.target.value\n        });\n\n\n    }\n    render() {\n        let {robots,searchField} = this.state;\n\n        let filteredRobots = robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField.toLocaleLowerCase());\n        })\n\n        if(!robots.length ) {\n            return (\n                <div className='App tc'>\n                <h1>RoboFriends</h1>\n                <p>Loading....</p>\n                </div>\n            )\n        } else {\n            return (\n                <div className='App tc'>\n                <h1>RoboFriends</h1>\n                <SearchBox handleSearch= {this.handleSearch}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots= {filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n                </div>\n            )\n\n        }\n       \n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}